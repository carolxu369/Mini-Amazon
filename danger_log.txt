Danger_log 
ECE 568: project - Mini-Amazon

Yuchen Zhang (yz674)
Junhan Xu (jx139)

- How to handle the asynchronous communication between Amazon - the world / UPS?

The potential danger here is if we use sequential operations with single thread, that thread may have to busy waiting for some certain message to trigger the next step of order processing, which is usually not a good practice in asynchronous communication. The basic idea to solve this problem is to isolate the communication between Amazon - the world & Amazon - UPS, and also isolate the process of send/receive messages. Thus, the server has four threads in its running routine - Amazon -> the world, Amazon <- the world, Amazon -> UPS, Amazon <- UPS; the execution of each thread is totally independent to other's.

- But how should these threads communicate to each other to process an order?

Since the communication between modules is always asynchronous, we believe that it is a good idea to make each thread "Stateless" - which means, the threads handles the business logic of processing orders, but never save any state of them. Instead, order states are saved in persistent storage, the postgresql database, where all the threads can get access to and query/update the status of any order - that is the way of multiple threads work together. This structure is similar to the common design of modern servers, e.g. HTTP servers are usually Stateless and all the data is stored in the databases behind of the scene.

- How to handle the ack mechanism?

The ack mechanism can be implemented in many different ways. As a receiver of the messages, we prefer immediately replying the sender with acks once receiving any messages, so that the duplicate messages can be reduced. As a sender, it seems straightforward to keep sending the same message (with a reasonable time interval) until receiving the corresponding ack, but it is possible that we accidentally create a deadlock here - if the receiver also implements ack mechanism in this way, both side may keep sending duplicate messages to each other since neither of them receives the ack. Thus, a good practice here is never letting ack mechanism block the normal message sending process - just send the message once, then store it somewhere for potential re-send before receiving ack.

- How to make sure that seq_nums and shipids are globally unique?

The point is there should be a "manager" class that only has one instance in the project's lifetime to handle these issues. This is a scenario that suits the usage of Singleton pattern very well - in our case, we make the class "IPC_helper" a Singleton using "Meyer's Singleton", which is proved thread-safe after C++11. Whenever a seq_num/shipid is needed, we can get one from IPC_helper and it manages the self increment of these numbers.

- How to implement thread-safe in this project?

The global class/resources (e.g. IPC_helper, database connection) need to be thread-safe as they might be accessed/modified by multiple threads at the same time. As we do not need to care too much about parallelism and performance for this project, we simply add a lock for each method in IPC_helper, and add a global lock for the database connection. Note that we use boost::mutex::scoped_lock here, which is a good practice with RAII that avoids forgetting to release the mutex.

- How to implement At Most Once semantic?

This is important because the protocol allows resending the duplicate message with no time limits before receiving ack, but duplicate operations are never allowed. We make use of the global IPC_helper to store the received seq_num, and check if the seq_num has been seen before the execution of every operation.
